type int64 = int <ocaml repr="int64">

(* corresponds to Map_utils
*)
type ('k, 'v) diff = {
  common : ('k * 'v) list;
  updated : ('k * ('v * 'v)) list;
  added : ('k * 'v) list;
  removed : ('k * 'v) list;
}

type ('k, 'v) diff_bucketed = {
  common : ('k * 'v list) list;
  added : ('k * 'v list) list;
  removed : ('k * 'v list) list;
}

(* corresponds to Time_slot
*)
type time_slot = (int64 * int64)

(* corresponds to Sched_req_data_skeleton
*)
type 'a fixed = {
  task_seg_related_data : 'a;
  start : int64;
}

type 'a split_even = {
  task_seg_related_data : 'a;
  time_slots : time_slot list;
  buckets : time_slot list;
}

type 'a sched_req_data_skeleton = [
  | Fixed of 'a fixed
  | Shift of ('a list * time_slot list)
  | Split_and_shift of ('a * time_slot list)
  | Split_even of 'a split_even
  | Time_share of ('a list * time_slot list)
  | Push_to of ([Front | Back] * 'a * time_slot list)
]

(* corresponds to Task
*)
type arith_seq = {
  start : int64;
  end_exc : int64;
  diff : int64;
}

type user_id = int64

type task_id = (user_id * int64)

type task_inst_id = (user_id * int64 * int64)

type task_seg_id = (user_id * int64 * int64 * int64)

type task = (task_id * task_data)

type task_data = {
  splittable : bool;
  parallelizable : bool;
  task_type : task_type;
}

type task_type = [
  | One_off
  | Recurring of recur
]

type recur = [
  | Arithmetic_seq of (arith_seq * recur_data)
]

type sched_req_template = task_seg_size sched_req_data_skeleton

type recur_data = {
  task_inst_data : task_inst_data;
  sched_req_templates : sched_req_template list;
}

type task_inst = (task_inst_id * task_inst_data)

type task_inst_data = {
  task_inst_type : task_inst_type;
}

type task_inst_type = [
  | Reminder
  | Reminder_quota_counting of int64
  | Passing
]

type task_seg = (task_seg_id * task_seg_size)

type task_seg_alloc_req = (task_inst_id * task_seg_size)

type task_seg_size = int64

type task_seg_place = (task_seg_id * int64 * int64)

(* corresponds to Sched_req
*)
type sched_req_id = int64

type sched_req = (sched_req_id * sched_req_data)

type sched_req_data = task_seg_alloc_req sched_req_data_skeleton

type sched_req_record = (sched_req_id * sched_req_record_data)

type sched_req_record_data = task_seg sched_req_data_skeleton

(* corresponds to Sched
*)
type sched_id = int

type store = {
  task_list : task list;
  task_inst_list : task_inst list;
  task_seg_list : task_seg list;
  user_id_to_task_ids : (user_id * int64 list) list;
  task_id_to_task_inst_ids : (task_id * int64 list) list;
  task_inst_id_to_task_seg_ids : (task_inst_id * int64 list) list;
  sched_req_ids : sched_req_id list;
  sched_req_pending_list : sched_req list;
  sched_req_record_list : sched_req_record list;
  quota : (task_inst_id * int64) list;
}

type store_diff = {
  task_list_diff : (task_id, task_data) diff;
  task_inst_list_diff : (task_inst_id, task_inst_data) diff;
  task_seg_list_diff : (task_seg_id, task_seg_size) diff;
}