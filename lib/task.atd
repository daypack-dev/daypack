type int64 <ocaml from="Int64"> = abstract

type arith_seq = {
  start : int64;
  end_exc : int64;
  diff : int64;
}

type user_id = int64

type task_id = (user_id * int64)

type task_inst_id = (user_id * int64 * int64)

type task_seg_id = (user_id * int64 * int64 * int64)

type task = (task_id * task_data)

type task_data = {
  splittable : bool;
  parallelizable : bool;
  task_type : task_type;
}

type task_type = [
  | One_off
  | Recurring of recur
]

type recur = [
  | Arithmetic_seq of (arith_seq * recur_data)
]

type 'a sched_req_data_skeleton <ocaml from ="Sched_req_data_skeleton"> = abstract

type sched_req_template = task_seg_size sched_req_data_skeleton

type recur_data = {
  task_inst_data : task_inst_data;
  sched_req_templates : sched_req_template list;
}

type task_inst = (task_inst_id * task_inst_data)

type task_inst_data = {
  task_inst_type : task_inst_type;
}

type task_inst_type = [
  | Reminder
  | Reminder_quota_counting of int64
  | Passing
]

type task_seg = (task_seg_id * task_seg_size)

type task_seg_alloc_req = (task_inst_id * task_seg_size)

type task_seg_size = int64

type task_seg_place = (task_seg_id * int64 * int64)
